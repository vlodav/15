#include<stack>
#include<string>
#include<iomanip>
#include<Windows.h>
using namespace std;
struct BOOK
{
    int NumberUDK = 0, KOLVOEKZ = 0, DATA = 0;
    string AUTOR = "none", NAMEBOOK = "none";
};
void vozmoshnosi()
{
    cout << "Для добавления книги в конец введите 1." << endl;
    cout << "Для добавления книги перед указанной книгой введите 2, после указанной 3." << endl;
    cout << "Для добавления книги отсортированной по автору введите 4." << endl;
    cout << "Для удаления выбранной книги введите 5." << endl;
    cout << "Для вывода информации о книгах введите 6." << endl;
    cout << "Для взятия книги введите 7, для возврата книги введите 8." << endl;
    cout << "Для выхода из программы введите 0." << endl;
}
void vvoddannix(BOOK& data)
{
    cout << "Введите номер UDK: ";
    cin >> data.NumberUDK;
    cin.ignore();
    cout << "Введите Фамилию и инициалы автора: ";
    getline(cin, data.AUTOR);
    cout << "Введите название книги: ";
    getline(cin, data.NAMEBOOK);
    cout << "Введите год издания книги: ";
    cin >> data.DATA;
    cout << "Введите количество экземпляров книги: ";
    cin >> data.KOLVOEKZ;
    cin.ignore();
}
int main() {
    setlocale(LC_ALL, "Russian");
    SetConsoleCP(1251);
    stack<BOOK> bookstack;
    int number = 0;
    do
    {
        BOOK bookdan;
        vozmoshnosi();
        cout << "Ваш выбор: ";
        cin >> number;
        cin.ignore();
        switch (number)
        {
        case 1:
        {
            vvoddannix(bookdan);
            bookstack.push(bookdan);
            break;
        }
        case 2:
        {
            int index;
            cout << "Введите номер книги перед которой хотите вставить: ";
            cin >> index;
            stack<BOOK> tempstack;
            vvoddannix(bookdan);
            int count = 0;
            if (index == 0)
            {
                while (!bookstack.empty())
                {

                    tempstack.push(bookstack.top());
                    bookstack.pop();
                }
                bookstack.push(bookdan);
                while (!tempstack.empty())
                {

                    bookstack.push(tempstack.top());
                    tempstack.pop();
                }
            }
            else
            {
                bool a = true;
                while (!bookstack.empty())
                {
                    if (index = count)
                    {
                        a = false;
                        break;
                    }
                    tempstack.push(bookstack.top());
                    bookstack.pop();
                    count++;
                }
                if (a == false)
                {
                    bookstack.push(bookdan);
                    while (!tempstack.empty())
                    {
                        bookstack.push(tempstack.top());
                        tempstack.pop();
                    }
                }
                else {
                    cout << "неверно указан index!" << endl;
                    while (!tempstack.empty())
                    {
                        bookstack.push(tempstack.top());
                        tempstack.pop();
                    }
                }
                
            }
            break;
        }
        case 3:
        {
            int index;
            cout << "Введите номер книги после которой хотите вставить: ";
            cin >> index;
            stack<BOOK> tempstack;
            vvoddannix(bookdan);
            int count = 0;
            while (!bookstack.empty())
            {
                tempstack.push(bookstack.top());
                bookstack.pop();
            }
            while (!tempstack.empty())
            {
                
                bookstack.push(tempstack.top());
                tempstack.pop();
                if (count = index) {
                    break;
                }
            }
            bookstack.push(bookdan);
            while (!tempstack.empty())
            {
                bookstack.push(tempstack.top());
                tempstack.pop();
            }
            break;
        }
        case 4:
        {
            vvoddannix(bookdan);
            stack<BOOK> tempstack;
            while (!bookstack.empty()&& bookdan.AUTOR > bookstack.top().AUTOR)
            {
                tempstack.push(bookstack.top());
                bookstack.pop();
            }
            bookstack.push(bookdan);
            while (!tempstack.empty())
            {
                bookstack.push(tempstack.top());
                tempstack.pop();
            }
            break;
        }
        case 5:
        {
            int index;
            cout << "Введите номер книги, которую хотите удалить: ";
            cin >> index;
            cin.ignore();
            int proverka = 0;
            stack<BOOK> tempstack;
            while (!bookstack.empty())
            {
                if (proverka == index)
                {
                    bookstack.pop();
                    break;
                }
                tempstack.push(bookstack.top());
                bookstack.pop();
                proverka++;
            }
            while (!tempstack.empty())
            {
                bookstack.push(tempstack.top());
                tempstack.pop();
            }
            break;
        }
        case 6:
        {
            if (bookstack.empty())
            {
                cout << "Библиотека пуста" << endl;
            }
            else
            {
                cout << "--------------------------------------------------------------------------------------------------" << endl;
                cout << "|" << setw(5) << left << "№" << "|" << setw(10) << left << "Номер UDK" << "|" << setw(25) << left << "Фамилия инициалы автора" << "|" << setw(30) << left << "Название книги" << "|" << setw(10) << left
                    << "Год издания" << "|" << setw(10) << left << "Количество" << "|" << endl;
                cout << "--------------------------------------------------------------------------------------------------" << endl;
                int i = 0;
                stack<BOOK> tempstack;
                while (!bookstack.empty())
                {
                    tempstack.push(bookstack.top());
                    bookstack.pop();
                }
                while (!tempstack.empty())
                {
                    cout << "|" << setw(5) << left << i;
                    cout << "|" << setw(10) << left << tempstack.top().NumberUDK;
                    cout << "|" << setw(25) << left << tempstack.top().AUTOR;
                    cout << "|" << setw(30) << left << tempstack.top().NAMEBOOK;
                    cout << "|" << setw(11) << left << tempstack.top().DATA;
                    cout << "|" << setw(10) << left << tempstack.top().KOLVOEKZ << "|" << endl;
                    cout << "--------------------------------------------------------------------------------------------------" << endl;
                    bookstack.push(tempstack.top());
                    tempstack.pop();
                    i++;

                }
            }
            break;
        }
        case 7:
        {
            int UDK;
            cout << "Введите номер UDK: ";
            cin >> UDK;
            cin.ignore();
            bool p = true;
            stack<BOOK> tempstack;
            while (!bookstack.empty())
            {
                if(bookstack.top().NumberUDK == UDK && bookstack.top().NumberUDK>0){
                    cout << "Книга успешно выдана!" << endl;
                    bookstack.top().KOLVOEKZ--;
                    p = false;
                    break;
                }
                tempstack.push(bookstack.top());
                bookstack.pop();
            }
            while (!tempstack.empty())
            {
                bookstack.push(tempstack.top());
                tempstack.pop();
            }
            if (p)
            {
                cout << "Неверный номер UDK!" << endl;
            }
            break;
        }
        case 8:
        {
            int UDK;
            cout << "Введите номер UDK: ";
            cin >> UDK;
            cin.ignore();
            bool p = true;
            stack<BOOK> tempstack;
            while (!bookstack.empty())
            {
                if (bookstack.top().NumberUDK == UDK) {
                    cout << "Книга успешно возвращена!" << endl;
                    bookstack.top().KOLVOEKZ++;
                    p = false;
                    break;
                }
                tempstack.push(bookstack.top());
                bookstack.pop();
            }
            while (!tempstack.empty())
            {
                bookstack.push(tempstack.top());
                tempstack.pop();
            }
            if (p)
            {
                cout << "Неверный ноиер UDK!" << endl;
            }
            break;
        }
        case 0:
            break;
        default:
            cout << "Неверно введенные данные!" << endl;
            break;
        }
    } while (number != 0);
    return 0;
}
